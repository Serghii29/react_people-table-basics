{"version":3,"sources":["components/PageNavLink.tsx","components/NavBar/NavBar.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","pages/PeoplePage.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","NavBar","role","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","slug","name","sex","PeopleTable","people","personSlug","peopleWithParents","map","human","mother","find","person","motherName","father","fatherName","born","died","isSelected","editedMotherName","editedFatherName","PersonPage","useState","setPeople","isError","setIsError","isLoading","setLoading","useParams","fetchPeople","useEffect","HomePage","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d6104f64.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  text: string,\n};\n\nexport const PageNavLink: FC<Props> = ({\n  to, text,\n}) => (\n  <NavLink\n    className={({ isActive }) => classNames('navbar-item',\n      { 'has-background-grey-lighter': isActive })}\n    to={to}\n  >\n    {text}\n  </NavLink>\n);\n","import React from 'react';\nimport { PageNavLink } from '../PageNavLink';\n\nexport const NavBar: React.FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\ntype Props = {\n  slug: string,\n  name: string,\n  sex?: string\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  slug,\n  name,\n  sex,\n}) => (\n  <Link to={`../${slug}`} className={classNames({ 'has-text-danger': sex === 'f' })}>\n    {name}\n  </Link>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  people: Person[],\n  personSlug: string,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, personSlug }) => {\n  if (!people) {\n    return (\n      <p data-cy=\"noPeopleMessage\">\n        There are no people on the server\n      </p>\n    );\n  }\n\n  const peopleWithParents = people.map(human => ({\n    ...human,\n    mother: people.find(person => person.name === human.motherName) || null,\n    father: people.find(person => person.name === human.fatherName) || null,\n  }));\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {peopleWithParents.map(person => {\n          const {\n            name,\n            sex,\n            born,\n            died,\n            slug,\n            motherName,\n            fatherName,\n            mother,\n            father,\n          } = person;\n\n          const isSelected = personSlug === slug;\n          const editedMotherName = motherName || '-';\n          const editedFatherName = fatherName || '-';\n\n          return (\n            <tr\n              key={name}\n              data-cy=\"person\"\n              className={classNames({ 'has-background-warning': isSelected })}\n            >\n              <td>\n                <PersonLink\n                  slug={slug}\n                  name={name}\n                  sex={sex}\n                />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>\n                {mother\n                  ? (\n                    <PersonLink\n                      slug={mother.slug}\n                      name={editedMotherName}\n                      sex={mother.sex}\n                    />\n                  )\n                  : editedMotherName}\n              </td>\n              <td>\n                {father\n                  ? <PersonLink slug={father.slug} name={editedFatherName} />\n                  : editedFatherName}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\n\nexport const PersonPage: React.FC = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const { personSlug = '' } = useParams();\n\n  const fetchPeople = async () => {\n    try {\n      setLoading(true);\n\n      const person = await getPeople();\n\n      setPeople(person);\n    } catch {\n      setIsError(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  return (\n    <div className=\"block\">\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"box table-container\">\n        {isLoading && <Loader />}\n\n        {isError && (\n          <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n            Something went wrong\n          </p>\n        )}\n\n        {people && (\n          <PeopleTable\n            people={people}\n            personSlug={personSlug}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { PersonPage } from './pages';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PersonPage />} />\n            <Route path=\":personSlug\" element={<PersonPage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}